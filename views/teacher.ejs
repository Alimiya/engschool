<!DOCTYPE html>
<html lang="kz">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<style>
    .has-lesson {
        background-color: red !important
    }

    .past-lesson {
        background-color: green !important
    }

</style>
<body>
<%- include('components/header') %>
<div class="container mt-5">
    <div class="card">
        <div class="card-header" data-i18n="personal-info">
        </div>
        <div class="card-body">
            <h5 class="card-title" id="teacherName"></h5>
            <p class="card-text d-inline" data-i18n="teaching-classes"></p><span id="teacherClasses" class="d-inline-block"></span>
        </div>
    </div>

    <div class="card mt-3">
        <div class="card-body">
            <button class="btn btn-primary mt-2"
                    data-i18n="create-student" id="createStudent">
            </button>
            <button class="btn btn-primary mt-2"
                    data-i18n="create-class" id="createClass">
            </button>
            <button class="btn btn-primary mt-2"
                    data-i18n="create-schedule" id="createSchedule">
            </button>
            <button class="btn btn-primary mt-2"
                    data-i18n="add-lessons" id="addUpdateLessons">
            </button>
            <button class="btn btn-primary mt-2"
                    data-i18n="update-lessons" id="updateLessons">
            </button>
            <button class="btn btn-primary mt-2"
                     data-i18n="add-student-to-class" id="addTo">
            </button>
        </div>
    </div>

    <div class="mt-3">
        <select class="form-select mb-2" id="classSelect"></select>
        <select class="form-select mb-2" id="yearSelect"></select>
        <select class="form-select mb-2" id="monthSelect"></select>
    </div>

    <div class="mt-3">
        <div id="calendar" class="calendar"></div>
    </div>
</div>
<script type="module" defer>
    import i18n from "/i18n.js";
    const url = window.location.href
    const { teacherId } = extractIdsFromUrl(url)
    async function fetchTeacherDataAndRenderCalendar() {

        const classSelect = document.getElementById('classSelect')
        if (classSelect.children.length === 0) {
            classSelect.innerHTML = '<option value="" selected disabled data-i18n="select-class"></option>'
        }

        const yearSelect = document.getElementById('yearSelect')
        yearSelect.innerHTML = '<option value="" selected disabled data-i18n="select-year"></option>'

        const monthSelect = document.getElementById('monthSelect')
        monthSelect.innerHTML = '<option value="" selected disabled data-i18n="select-month"></option>'

        try {
            const response = await axios.get(`https://sch-eng.live/api/teacher/${teacherId}`)
            const teacher = response.data.teacher[0]

            document.getElementById('teacherName').innerText = `${teacher.surname} ${teacher.name} ${teacher.lastname}`
            const teacherClasses = teacher.classes.map(cls => cls.name).join(', ')
            document.getElementById('teacherClasses').innerText = ` ${teacherClasses}`

            teacher.classes.forEach(cls => {
                const option = document.createElement('option')
                option.value = cls._id
                option.innerText = cls.name
                classSelect.appendChild(option)
            })

            const yearsAndMonths = getUniqueYearsAndMonthsForTeacher(teacher.classes)
            renderYearAndMonthSelect(yearsAndMonths)
        } catch (error) {
            console.error('Error fetching teacher data:', error)
        }
    }

    function getUniqueYearsAndMonthsForTeacher(classes) {
        const yearsAndMonths = {}
        classes.forEach(cls => {
            cls.schedule.forEach(scheduleItem => {
                if (!yearsAndMonths[scheduleItem.year]) {
                    yearsAndMonths[scheduleItem.year] = []
                }
                if (!yearsAndMonths[scheduleItem.year].includes(scheduleItem.month)) {
                    yearsAndMonths[scheduleItem.year].push(scheduleItem.month)
                }
            })
        })
        return yearsAndMonths
    }

    function renderYearAndMonthSelect(yearsAndMonths) {
        const yearSelect = document.getElementById('yearSelect')
        Object.keys(yearsAndMonths).forEach(year => {
            const option = document.createElement('option')
            option.value = year
            option.innerText = year
            yearSelect.appendChild(option)
        })
        yearSelect.addEventListener('change', function (event) {
            const selectedYear = event.target.value
            const monthSelect = document.getElementById('monthSelect')
            if (selectedYear) {
                yearsAndMonths[selectedYear].forEach(month => {
                    const option = document.createElement('option')
                    option.value = month
                    option.dataset.i18n = month
                    option.textContent = getMonthName(month)
                    monthSelect.appendChild(option)
                })
            }
        })
    }

    document.getElementById('classSelect').addEventListener('change', function (event) {
        const selectedClassId = event.target.value
        fetchClassCalendarIfSelected(selectedClassId)
    })

    document.getElementById('yearSelect').addEventListener('change', function (event) {
        const selectedYear = event.target.value
        const selectedMonth = document.getElementById('monthSelect').value
        const selectedClassId = document.getElementById('classSelect').value
        fetchClassCalendarIfSelected(selectedClassId, selectedYear, selectedMonth)
    })

    document.getElementById('monthSelect').addEventListener('change', function (event) {
        const selectedMonth = event.target.value
        const selectedYear = document.getElementById('yearSelect').value
        const selectedClassId = document.getElementById('classSelect').value
        fetchClassCalendarIfSelected(selectedClassId, selectedYear, selectedMonth)
    })

    function fetchClassCalendarIfSelected(classId, year, month) {
        if (classId && year && month) {
            fetchClassCalendar(classId, year, month)
        } else {
            hideCalendar()
        }
    }

    function hideCalendar() {
        const calendarElement = document.getElementById('calendar')
        calendarElement.innerHTML = ''
    }

    async function fetchClassCalendar(classId, year, month) {
        await axios.get(`https://sch-eng.live/api/classschedule/${classId}/${year}/${month}`)
            .then(function (response) {
                const calendarData = response.data.calendar
                const lessonDays = response.data.lessonDays
                const lessons = response.data.lessons.map(lesson => lesson.day)
                renderCalendar(calendarData, lessonDays, lessons)
            })
            .catch(function (error) {
                console.error('Error fetching class schedule:', error)
            })
    }

    function renderCalendar(calendarData, lessonDays, lessons) {
        const calendarElement = document.getElementById('calendar')
        calendarElement.innerHTML = ''

        const daysOfWeek = calendarData.daysOfWeek
        const days = calendarData.days

        const table = document.createElement('table')
        table.classList.add('table')

        const thead = document.createElement('thead')
        const headerRow = document.createElement('tr')
        daysOfWeek.forEach(day => {
            const th = document.createElement('th')
            th.textContent = day
            headerRow.appendChild(th)
        })
        thead.appendChild(headerRow)
        table.appendChild(thead)

        const tbody = document.createElement('tbody')
        days.forEach(week => {
            const weekRow = document.createElement('tr')
            week.forEach(day => {
                const td = document.createElement('td')
                td.textContent = day ? day : ''
                td.classList.add('calendar-day')

                if (day) {
                    td.setAttribute('data-day', day)
                }

                if (lessons.includes(day)) {
                    td.classList.add('past-lesson')
                }

                if (lessonDays.includes(day)) {
                    td.classList.add('has-lesson')
                }


                if (day && lessonDays.includes(day)) {
                    td.addEventListener('click', function () {
                        handleCalendarDayClick(day)
                    })
                }
                weekRow.appendChild(td)
            })
            tbody.appendChild(weekRow)
        })
        table.appendChild(tbody)

        calendarElement.appendChild(table)
    }

    function handleCalendarDayClick(day) {
        const selectedYear = document.getElementById('yearSelect').value
        const selectedMonth = document.getElementById('monthSelect').value
        const selectedClassId = document.getElementById('classSelect').value

        if (selectedYear && selectedMonth && selectedClassId) {
            const calendarDays = document.querySelectorAll('.calendar-day')

            const filteredCalendarDays = Array.from(calendarDays).filter(calendarDay => {
                return calendarDay.dataset.day !== undefined && calendarDay.dataset.day !== null
            })

            let isPast = false

            filteredCalendarDays.forEach(calendarDay => {
                if (parseInt(calendarDay.dataset.day) === parseInt(day) && calendarDay.classList.contains('past-lesson')) {
                    isPast = true
                }
            })

            if (isPast) {
                window.location.href = `/profile/teacher/${teacherId}/class/update/lesson/${selectedClassId}/${selectedYear}/${selectedMonth}/${day}`
            } else {
                window.location.href = `/profile/teacher/${teacherId}/class/add/lesson/${selectedClassId}/${selectedYear}/${selectedMonth}/${day}`
            }
        } else {
            alert('Please select a class, year, and month first.')
        }
    }

    function isPastLesson(day) {
        const pastLessons = document.querySelectorAll('.past-lesson')
        pastLessons.forEach(lesson => {
        })
        return Array.from(pastLessons).some(lesson => lesson.textContent.trim() === day)
    }

    function extractIdsFromUrl(url) {
        const segments = url.split('/')
        const teacherId = segments[5]
        return {teacherId}
    }

    function getMonthName(month) {
        const savedLanguage = localStorage.getItem('language')
        const language = savedLanguage || 'kz'

        const monthElement = document.createElement('option')
        monthElement.value = month
        monthElement.setAttribute('data-i18n', `${month}`)
        if (monthElement) {
            const key = monthElement.getAttribute('data-i18n')
            return i18n[language][key] || ''
        }

        return ''
    }

    const createStudent = document.getElementById('createStudent')
    const createSchedule = document.getElementById('createSchedule')
    const createClass = document.getElementById('createClass')
    const addUpdateLessons = document.getElementById('addUpdateLessons')
    const updateLessons = document.getElementById('updateLessons')
    const addTo = document.getElementById('addTo')

    createStudent.addEventListener('click',function() {
        window.location.href = `/profile/teacher/${teacherId}/student/create`
    })
    createSchedule.addEventListener('click', function() {
        window.location.href = `/profile/teacher/${teacherId}/class/add/schedule`
    })
    createClass.addEventListener('click', function() {
        window.location.href = `/profile/teacher/${teacherId}/class/create`
    })
    addUpdateLessons.addEventListener('click', function() {
        window.location.href = `/profile/teacher/${teacherId}/class/add/lessons`
    })
    updateLessons.addEventListener('click', function() {
        window.location.href = `/profile/teacher/${teacherId}/class/update/lessons`
    })
    addTo.addEventListener('click', function() {
        window.location.href = `/profile/teacher/${teacherId}/class/add/students`
    })

    document.addEventListener('DOMContentLoaded', function() {
    fetchTeacherDataAndRenderCalendar()
    })
</script>
</body>
</html>

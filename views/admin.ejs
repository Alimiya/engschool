<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        .scrollable-table-wrapper {
            overflow-x: auto
        }

        .scrollable-table {
            width: 100%
        }
    </style>
</head>
<body>
<div class="container mt-4">
    <div class="input-group mb-3">
        <input id="searchInput" type="text" class="form-control" placeholder="Search by name">
    </div>

    <div class="input-group mb-3">
        <select id="categorySelect" class="form-select">
            <option value="manager">Manager</option>
            <option value="teacher">Teacher</option>
            <option value="class">Class</option>
        </select>
    </div>

    <div class="input-group mb-2">
        <select id="statusSelect" class="form-select">
            <option value="all">All</option>
            <option value="blocked">Blocked</option>
            <option value="unblocked">Unblocked</option>
        </select>
    </div>

    <div id="classOptions" class="mb-3" style="display: none">
        <select id="allClasses" class="form-select mb-3"></select>
        <select id="classStatusSelect" class="form-select mb-3">
            <option value="all">All</option>
            <option value="blocked">Blocked</option>
            <option value="unblocked">Unblocked</option>
        </select>
        <select id="paymentStatusSelect" class="form-select mb-3">
            <option value="all">All</option>
            <option value="paid">Paid</option>
            <option value="non-paid">Non-paid</option>
        </select>
    </div>
    <button class="btn btn-primary mt-2" onclick="window.location.href='/profile/admin/manager/create'">Create Manager
    </button>
    <button class="btn btn-primary mt-2" onclick="window.location.href='/profile/admin/teacher/create'">Create Teacher
    </button>
    <form action="/api/auth/logout" method="post">
        <button class="btn btn-danger mt-2">Logout</button>
    </form>
</div>
<div class="container mt-4">
    <div class="scrollable-table-wrapper">
        <table class="table table-striped scrollable-table" id="managerTable">
            <thead>
            <tr class="text-center">
                <th scope="col">Full Name</th>
                <th scope="col">Status</th>
                <th scope="col">Action</th>
            </tr>
            </thead>
            <tbody id="managerTableBody">
            </tbody>
        </table>

        <table class="table table-striped scrollable-table" id="teacherTable" style="display: none">
            <thead>
            <tr>
                <th scope="col">Full Name</th>
                <th scope="col">Status</th>
                <th scope="col">Action</th>
            </tr>
            </thead>
            <tbody id="teacherTableBody">
            </tbody>
        </table>

        <table class="table table-striped scrollable-table" id="studentTable" style="display: none">
            <thead>
            <tr>
                <th scope="col">Full Name</th>
                <th scope="col">Creation</th>
                <th scope="col">Payment</th>
                <th scope="col">Status</th>
                <th scope="col">Action</th>
            </tr>
            </thead>
            <tbody id="studentTableBody">
            </tbody>
        </table>
    </div>
</div>

<script>
    let originalManagersData = []
    let originalTeachersData = []
    let originalClassesData = []

    async function getManagers() {
        const response = await axios.get(`http://localhost:3000/api/admin/managers`)
        originalManagersData = response.data.managers
        filterManagers()

    }

    async function getTeachers() {
        const response = await axios.get(`http://localhost:3000/api/admin/teachers`)
        originalTeachersData = response.data.teachers
        filterTeachers()

    }

    async function getClasses() {
        const allClassesSelect = document.getElementById('allClasses')
        const response = await axios.get(`http://localhost:3000/api/admin/classes`)
        originalClassesData = response.data.classes
        filterClasses()
        originalClassesData.forEach(classs => {
            const option = document.createElement('option')
            option.value = classs._id
            option.textContent = classs.name
            allClassesSelect.appendChild(option)
        })
    }

    function filterManagers() {
        const searchQuery = searchInput.value.trim().toLowerCase()
        const statusValue = statusSelect.value
        console.log(statusValue)

        const filteredManagers = originalManagersData.filter(manager => {
            const fullName = `${manager.surname} ${manager.name} ${manager.lastname}`.toLowerCase()
            const isMatch = fullName.includes(searchQuery)

            if (statusValue === "blocked") {
                return manager.blocked === true && isMatch
            } else if (statusValue === "unblocked") {
                return manager.blocked === false && isMatch
            } else {
                return isMatch
            }
        })

        renderManagers(filteredManagers)
    }

    function filterTeachers() {
        const searchQuery = searchInput.value.trim().toLowerCase()
        const statusValue = statusSelect.value
        const filteredTeachers = originalTeachersData.filter(teacher => {
            const fullName = `${teacher.surname} ${teacher.name} ${teacher.lastname}`.toLowerCase()
            const isMatch = fullName.includes(searchQuery)

            if (statusValue === "blocked") {
                return teacher.blocked === true && isMatch
            } else if (statusValue === "unblocked") {
                return teacher.blocked === false && isMatch
            } else {
                return isMatch
            }
        })
        renderTeachers(filteredTeachers)
    }

    function filterClasses() {
        const searchQuery = searchInput.value.trim().toLowerCase()
        const paymentValue = paymentStatusSelect.value
        const statusValue = classStatusSelect.value

        const filteredClasses = originalClassesData.filter(classs =>
            classs.students.some(student => {
                console.log(student)
                const fullName = `${student.surname} ${student.name} ${student.lastname}`.toLowerCase()
                const isMatch = fullName.includes(searchQuery)

                const isBlockedMatch = statusValue === "blocked" ? student.blocked === true : statusValue === "unblocked" ? student.blocked === false : true
                const isPaymentMatch = paymentValue === "paid" ? student.payment === true : paymentValue === "non-paid" ? student.payment === false : true

                return isMatch && isBlockedMatch && isPaymentMatch
            })
        )
        renderClasses(filteredClasses)
    }

    function renderManagers(managers) {
        const managerTableBody = document.getElementById('managerTableBody')
        managerTableBody.innerHTML = ''

        managers.forEach(manager => {
            const tr = document.createElement('tr')
            tr.innerHTML = `
            <td>${manager.surname} ${manager.name} ${manager.lastname}</td>
            <td>${manager.blocked}</td>
            <td>
                ${manager.blocked === false ?
                `<form action="/api/admin/manager/block/${manager._id}" method="post"><button class="btn btn-danger" type="submit">Block</button></form>` :
                `<form action="/api/admin/manager/unblock/${manager._id}" method="post"><button class="btn btn-success" type="submit">Unblock</button></form>`}
            </td>
        `
            managerTableBody.appendChild(tr)
        })
    }

    function renderTeachers(teachers) {
        const teacherTableBody = document.getElementById('teacherTableBody')
        teacherTableBody.innerHTML = ''

        teachers.forEach(teacher => {
            const tr = document.createElement('tr')
            tr.innerHTML = `
            <td>${teacher.surname} ${teacher.name} ${teacher.lastname}</td>
            <td>${teacher.blocked}</td>
            <td>
                ${teacher.blocked === false ?
                `<form action="/api/admin/teacher/block/${teacher._id}" method="post"><button class="btn btn-danger" type="submit">Block</button></form>` :
                `<form action="/api/admin/teacher/unblock/${teacher._id}" method="post"><button class="btn btn-success" type="submit">Unblock</button></form>`}
            </td>
        `
            teacherTableBody.appendChild(tr)
        })
    }

    function renderClasses(classesData) {
        const studentTableBody = document.getElementById('studentTableBody')
        studentTableBody.innerHTML = ''
        classesData.forEach(classs => {
            classs.students.forEach(student => {
                const tr = document.createElement('tr')
                tr.innerHTML = `
                    <td>${student.surname} ${student.name} ${student.lastname}</td>
                    <td>${student.status}</td>
                    <td>${student.payment}</td>
                    <td>${student.blocked}</td>
                    <td>
                    ${student.blocked === false ?
                    `<form action="/api/admin/student/block/${student._id}" method="post"><button class="btn btn-danger" type="submit">Block</button></form>` :
                    `<form action="/api/admin/student/unblock/${student._id}" method="post"><button class="btn btn-success" type="submit">Unblock</button></form>`}
                    </td>
                    <td>
                    ${student.status === "created" ?
                    `<button class="btn btn-success" type="submit" onclick="window.location.href='/profile/admin/student/add/${student._id}'">Add</button>` :
                    ``}
                    </td>
                `
                studentTableBody.appendChild(tr)
            })
        })
    }


    const categorySelect = document.getElementById('categorySelect')
    const classStatusSelect = document.getElementById('classStatusSelect')
    const paymentStatusSelect = document.getElementById('paymentStatusSelect')
    const allClassesSelect = document.getElementById('allClasses')
    const statusSelect = document.getElementById('statusSelect')
    const classOptions = document.getElementById('classOptions')
    const managerTable = document.getElementById('managerTable')
    const teacherTable = document.getElementById('teacherTable')
    const studentTable = document.getElementById('studentTable')

    categorySelect.addEventListener('change', function () {
        if (categorySelect.value === 'class') {
            classOptions.style.display = 'block'
            studentTable.style.display = 'block'
            statusSelect.style.display = 'none'
            teacherTable.style.display = 'none'
            managerTable.style.display = 'none'
        } else if (categorySelect.value === 'manager') {
            statusSelect.style.display = 'block'
            managerTable.style.display = 'block'
            classOptions.style.display = 'none'
            studentTable.style.display = 'none'
            teacherTable.style.display = 'none'
        } else {
            statusSelect.style.display = 'block'
            teacherTable.style.display = 'block'
            classOptions.style.display = 'none'
            studentTable.style.display = 'none'
            managerTable.style.display = 'none'
        }
    })

    statusSelect.addEventListener('change', function () {
        const selectedCategory = categorySelect.value

        if (selectedCategory === 'manager') {
            filterManagers()
        } else if (selectedCategory === 'teacher') {
            filterTeachers()
        }
    })

    classStatusSelect.addEventListener('change', function () {
        filterClasses()
    })
    paymentStatusSelect.addEventListener('change', function () {
        filterClasses()
    })
    const searchInput = document.getElementById('searchInput')
    searchInput.addEventListener('input', () => {
        console.log("Input value:", searchInput.value)

        const selectedCategory = categorySelect.value

        if (selectedCategory === 'manager') {
            filterManagers()
        } else if (selectedCategory === 'teacher') {
            filterTeachers()
        } else if (selectedCategory === 'class') {
            filterClasses()
        }
    })
    document.addEventListener('DOMContentLoaded', () => {
        getManagers()
        getTeachers()
        getClasses()
    })
</script>
</body>
</html>

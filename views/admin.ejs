<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/lodash/lodash.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/i18next/dist/umd/i18next.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/i18next-browser-languagedetector/dist/umd/i18nextBrowserLanguageDetector.min.js"></script>
    <style>
        .scrollable-table-wrapper {
            overflow-x: auto
        }

        .scrollable-table {
            width: 100%
        }
    </style>
</head>
<body>
<%- include('components/header') %>
<div class="container mt-4">
    <div class="input-group mb-3">
        <input id="searchInput" type="text" class="form-control" placeholder="Search">
    </div>

    <div class="input-group mb-3">
        <select id="categorySelect" class="form-select">
            <option value="manager" data-i18n="manager"></option>
            <option value="teacher" data-i18n="teacher"></option>
            <option value="class" data-i18n="class"></option>
        </select>
    </div>

    <div id="schoolSelection" class="mb-3" style="display: none">
        <select id="schoolSelect" class="form-select">
            <option value="" selected disabled data-i18n="select-school">
        </select>
    </div>

    <div class="input-group mb-2">
        <select id="statusSelect" class="form-select">
            <option value="all" data-i18n="all"></option>
            <option value="blocked" data-i18n="blocked"></option>
            <option value="unblocked" data-i18n="unblocked"></option>
        </select>
    </div>

    <div id="classOptions" class="mb-3" style="display: none">
        <select id="classSelect" class="form-select mb-3">
            <option value="" selected disabled data-i18n="select-class">
        </select>
        <select id="yearSelect" class="form-select mb-3">
            <option value="" selected disabled data-i18n="select-year">
        </select>
        <select id="monthSelect" class="form-select mb-3">
            <option value="" selected disabled data-i18n="select-month">
        </select>
        <select id="classStatusSelect" class="form-select mb-3">
            <option value="all" data-i18n="all"></option>
            <option value="blocked" data-i18n="blocked"></option>
            <option value="unblocked" data-i18n="unblocked"></option>
        </select>
        <select id="paymentStatusSelect" class="form-select mb-3">
            <option value="all" data-i18n="all"></option>
            <option value="paid" data-i18n="paid"></option>
            <option value="non-paid" data-i18n="non-paid"></option>
        </select>
    </div>
    <button class="btn btn-primary mt-2" id="createManager" data-i18n="create-manager"></button>
    <button class="btn btn-primary mt-2" id="createTeacher" data-i18n="create-teacher"></button>
    <button class="btn btn-primary mt-2" id="addStudent" data-i18n="add-student"></button>
    <button class="btn btn-primary mt-2" id="addManagerToSchool" data-i18n="add-manager-to-school"></button>
    <button class="btn btn-primary mt-2" id="updateSchoolManager" data-i18n="update-school-manager"></button>
</div>
<div class="container mt-4">
    <div class="scrollable-table-wrapper">
        <table class="table table-striped scrollable-table" id="managerTable">
            <thead>
            <tr class="text-center">
                <th scope="col" data-i18n="full-name"></th>
                <th scope="col" data-i18n="school"></th>
                <th scope="col" data-i18n="status"></th>
                <th scope="col" data-i18n="action"></th>
            </tr>
            </thead>
            <tbody id="managerTableBody">
            </tbody>
        </table>

        <table class="table table-striped scrollable-table" id="teacherTable" style="display: none">
            <thead>
            <tr>
                <th scope="col" data-i18n="full-name"></th>
                <th scope="col" data-i18n="status"></th>
                <th scope="col" data-i18n="action"></th>
            </tr>
            </thead>
            <tbody id="teacherTableBody">
            </tbody>
        </table>

        <table class="table table-striped scrollable-table" id="studentTable" style="display: none">
            <thead>
            <tr>
                <th scope="col" data-i18n="full-name"></th>
                <th scope="col" data-i18n="payment"></th>
                <th scope="col" data-i18n="status"></th>
                <th scope="col" data-i18n="action"></th>
            </tr>
            </thead>
            <tbody id="studentTableBody">
            </tbody>
        </table>
    </div>
</div>
</body>
<script src="/i18n.js" type="module"></script>

<script>
    const debouncedFilterData = _.debounce(filterData, 300)
    const categorySelect = document.getElementById('categorySelect')
    const statusSelect = document.getElementById('statusSelect')
    const classOptions = document.getElementById('classOptions')
    const classSelect = document.getElementById('classSelect')
    const yearSelect = document.getElementById('yearSelect')
    const monthSelect = document.getElementById('monthSelect')
    const classStatusSelect = document.getElementById('classStatusSelect')
    const paymentStatusSelect = document.getElementById('paymentStatusSelect')
    const searchInput = document.getElementById('searchInput')
    const managerTable = document.getElementById('managerTable')
    const teacherTable = document.getElementById('teacherTable')
    const studentTable = document.getElementById('studentTable')
    const schoolSelection = document.getElementById('schoolSelection')
    const schoolSelect = document.getElementById('schoolSelect')

    schoolSelect.addEventListener('change', () => {
        const selectedSchoolId = schoolSelect.value
        fetchData(selectedSchoolId)
    })

    async function fetchSchools() {
        try {
            const response = await axios.get('http://localhost:3000/api/admin/schools')
            const schools = response.data

            schools.forEach(school => {
                const option = document.createElement('option')
                option.value = school._id
                option.textContent = school.name
                schoolSelect.appendChild(option)
            })
        } catch (error) {
            console.error('Error fetching schools:', error)
        }
    }

    let originalData = []

    async function fetchData(schoolId) {
        let url = ''

        if (categorySelect.value === 'manager') {
            url = 'http://localhost:3000/api/admin/managers'
        } else if (categorySelect.value === 'teacher') {
            if (!schoolId) {
                clearTeacherTable()
                return
            }
            url = 'http://localhost:3000/api/admin/teachers'
        } else if (categorySelect.value === 'class') {
            url = 'http://localhost:3000/api/admin/classes'
        }


        if (schoolId) {
            url += `/${schoolId}`
        }
        console.log(url)

        const response = await axios.get(url)
        originalData = response.data
        if (categorySelect.value === 'class' && schoolId) {
            const classes = response.data.map(classInfo => ({
                _id: classInfo._id,
                name: classInfo.name,
                schedule: classInfo.schedule
            }));
            fillClassSelect(classes)
        }
        filterData()
    }

    function clearTeacherTable() {
        const teacherTableBody = document.getElementById('teacherTableBody')
        teacherTableBody.innerHTML = ''
    }

    classStatusSelect.addEventListener('change', filterData)
    paymentStatusSelect.addEventListener('change', filterData)

    function filterData() {
        const searchQuery = searchInput.value.trim().toLowerCase()

        const filteredData = originalData.flatMap(item => {
            if (categorySelect.value === 'class') {
                return item.students.filter(student => {
                    const paymentForMonth = student.payments.find(payment => payment.year == yearSelect.value && payment.month == monthSelect.value)
                    const fullName = `${student.surname} ${student.name} ${student.lastname}`.toLowerCase()
                    const isMatch = fullName.includes(searchQuery)

                    const classStatusValue = classStatusSelect.value
                    const paymentStatusValue = paymentStatusSelect.value
                    let isClassStatusMatch = true
                    let isPaymentStatusMatch = true

                    if (classStatusValue === 'blocked') {
                        isClassStatusMatch = student.blocked === true
                    } else if (classStatusValue === 'unblocked') {
                        isClassStatusMatch = student.blocked === false
                    }

                    if (paymentStatusValue === 'paid') {
                        isPaymentStatusMatch = paymentForMonth && paymentForMonth.payment !== undefined
                    } else if (paymentStatusValue === 'non-paid') {
                        isPaymentStatusMatch = !paymentForMonth || paymentForMonth.payment === undefined
                    }

                    return isMatch && isClassStatusMatch && isPaymentStatusMatch

                })
            } else {
                const fullName = `${item.surname} ${item.name} ${item.lastname}`.toLowerCase()
                const isMatch = fullName.includes(searchQuery)
                const StatusValue = statusSelect.value

                let isStatusMatch = true
                if (StatusValue === 'blocked') {
                    isStatusMatch = item.blocked === true
                } else if (StatusValue === 'unblocked') {
                    isStatusMatch = item.blocked === false
                }
                return isMatch && isStatusMatch ? [item] : []
            }
        })

        if (categorySelect.value === 'class') {
            const selectedClassId = classSelect.value
            const selectedYear = yearSelect.value
            const selectedMonth = monthSelect.value
            renderStudentTable(selectedClassId, selectedYear, selectedMonth, filteredData)
        } else if (categorySelect.value === 'teacher') {
            renderTeacherTable(filteredData)
        } else if (categorySelect.value === 'manager') {
            renderManagerTable(filteredData)
        }
    }

    function fillClassSelect(classNames) {
        classNames.forEach(className => {
            const option = document.createElement('option')
            option.value = className._id
            option.textContent = className.name
            classSelect.appendChild(option)
        });

        classSelect.addEventListener('change', () => {
            const selectedClassId = classSelect.value
            const selectedClass = classNames.find(item => item._id === selectedClassId)
            if (selectedClass) {
                const yearsAndMonths = getUniqueYearsAndMonthsForClass(selectedClass)
                renderYearAndMonthSelect(yearsAndMonths)
            }
        })
    }

    function getUniqueYearsAndMonthsForClass(selectedClass) {
        const yearsAndMonths = {}
        selectedClass.schedule.forEach(scheduleItem => {
            if (!yearsAndMonths[scheduleItem.year]) {
                yearsAndMonths[scheduleItem.year] = []
            }
            if (!yearsAndMonths[scheduleItem.year].includes(scheduleItem.month)) {
                yearsAndMonths[scheduleItem.year].push(scheduleItem.month)
            }
        })
        return yearsAndMonths
    }

    function renderYearAndMonthSelect(yearsAndMonths) {

        Object.keys(yearsAndMonths).forEach(year => {
            const option = document.createElement('option')
            option.value = year
            option.textContent = year
            yearSelect.appendChild(option)
        })

        yearSelect.addEventListener('change', () => {
            const selectedYear = yearSelect.value
            const selectedMonths = yearsAndMonths[selectedYear] || []
            selectedMonths.forEach(month => {
                const option = document.createElement('option')
                option.value = month
                option.textContent = getMonthName(month)
                monthSelect.appendChild(option)
            })
        })
    }

    classSelect.addEventListener('change', () => {
        const selectedClassId = classSelect.value
        const selectedYear = yearSelect.value
        const selectedMonth = monthSelect.value
        if (selectedClassId && selectedYear && selectedMonth) {
            renderStudentTable(selectedClassId, selectedYear, selectedMonth)
        }
    })

    yearSelect.addEventListener('change', () => {
        const selectedClassId = classSelect.value
        const selectedYear = yearSelect.value
        const selectedMonth = monthSelect.value
        if (selectedClassId && selectedYear && selectedMonth) {
            renderStudentTable(selectedClassId, selectedYear, selectedMonth)
        }
    })

    monthSelect.addEventListener('change', () => {
        const selectedClassId = classSelect.value
        const selectedYear = yearSelect.value
        const selectedMonth = monthSelect.value
        if (selectedClassId && selectedYear && selectedMonth) {
            renderStudentTable(selectedClassId, selectedYear, selectedMonth)
        }
    })

    function renderManagerTable(data) {
        managerTable.style.display = 'table'
        teacherTable.style.display = 'none'
        studentTable.style.display = 'none'

        const managerTableBody = document.getElementById('managerTableBody')
        managerTableBody.innerHTML = ''

        data.forEach(manager => {
            const schoolsNames = manager.schools.map(school => school.name).join(', ')
            const tr = document.createElement('tr')
            tr.innerHTML = `
                <td>${manager.surname} ${manager.name} ${manager.lastname}</td>
                <td>${schoolsNames}</td>
                <td>${manager.blocked}</td>
                <td>
                    ${manager.blocked === false ?
                `<form action="/api/admin/manager/block/${manager._id}" method="post"><button class="btn btn-danger" type="submit" data-i18n="block"></button></form>` :
                `<form action="/api/admin/manager/unblock/${manager._id}" method="post"><button class="btn btn-success" type="submit" data-i18n="unblock"></button></form>`}
                </td>
            `
            managerTableBody.appendChild(tr)
        })
    }

    function renderTeacherTable(data) {
        teacherTable.style.display = 'table'
        managerTable.style.display = 'none'
        studentTable.style.display = 'none'

        const teacherTableBody = document.getElementById('teacherTableBody')
        teacherTableBody.innerHTML = ''

        data.forEach(teacher => {
            const tr = document.createElement('tr')
            tr.innerHTML = `
                <td>${teacher.surname} ${teacher.name} ${teacher.lastname}</td>
                <td>${teacher.blocked}</td>
                <td>
                    ${teacher.blocked === false ?
                `<form action="/api/admin/teacher/block/${teacher._id}" method="post"><button class="btn btn-danger" type="submit" data-i18n="block"></button></form>` :
                `<form action="/api/admin/teacher/unblock/${teacher._id}" method="post"><button class="btn btn-success" type="submit" data-i18n="unblock"></button></form>`}
                </td>
            `
            teacherTableBody.appendChild(tr)
        })
    }

    async function renderStudentTable(classId, year, month, data) {
        teacherTable.style.display = 'none'
        managerTable.style.display = 'none'
        studentTable.style.display = 'table'
        const url = `http://localhost:3000/api/admin/class/${classId}`
        const response = await axios.get(url)
        const classData = response.data
        const students = data || classData.students

        const studentTableBody = document.getElementById('studentTableBody')
        studentTableBody.innerHTML = ''

        students.forEach(student => {
            const paymentForMonth = student.payments.find(payment => payment.year == year && payment.month == month)
            const tr = document.createElement('tr')
            tr.innerHTML = `
            <td>${student.surname} ${student.name} ${student.lastname}</td>
            <td>
                ${paymentForMonth ? paymentForMonth.payment : 'false'}
            </td>
            <td>${student.blocked}</td>
            <td>
                    ${student.blocked === false ?
                `<form action="/api/admin/student/block/${student._id}" method="post"><button class="btn btn-danger" type="submit" data-i18n="block"></button></form>` :
                `<form action="/api/admin/student/unblock/${student._id}" method="post"><button class="btn btn-success" type="submit" data-i18n="unblock"></button></form>`}
                </td>
        `
            studentTableBody.appendChild(tr)
        })
    }

    categorySelect.addEventListener('change', () => {
        if (categorySelect.value === 'class') {
            classOptions.style.display = 'block'
            schoolSelection.style.display = 'block'
            studentTable.style.display = 'table'
            statusSelect.style.display = 'none'
            fetchData()
        } else if (categorySelect.value === 'teacher'){
            schoolSelection.style.display = 'block'
            statusSelect.style.display = 'block'
            classOptions.style.display = 'none'
            fetchData()
        } else{
            statusSelect.style.display = 'block'
            schoolSelection.style.display = 'none'
            classOptions.style.display = 'none'
            fetchData()
        }
    })

    statusSelect.addEventListener('change', filterData)
    searchInput.addEventListener('input', filterData)

    // function getMonthName(month) {
    //     return i18n[currentLanguage].months[month - 1] || ''
    // }

    function getMonthName(month) {
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
        return monthNames[month - 1] || ''
    }

    function extractIdsFromUrl(url) {
        const segments = url.split("/")
        const adminId = segments[5]
        return {adminId}
    }

    const url = window.location.href
    const {adminId} = extractIdsFromUrl(url)

    const createManager = document.getElementById('createManager')
    const createTeacher = document.getElementById('createTeacher')
    const addStudent = document.getElementById('addStudent')
    const addManagerToSchool = document.getElementById('addManagerToSchool')
    const updateSchoolManager = document.getElementById('updateSchoolManager')

    createManager.addEventListener('click', () => {
        window.location.href = `/profile/admin/${adminId}/manager/create`
    })
    createTeacher.addEventListener('click', () => {
        window.location.href = `/profile/admin/${adminId}/teacher/create`
    })
    addStudent.addEventListener('click', () => {
        window.location.href = `/profile/admin/${adminId}/student/add`
    })
    addManagerToSchool.addEventListener('click', () => {
        window.location.href = `/profile/admin/${adminId}/school/manager/add`
    })
    updateSchoolManager.addEventListener('click', () => {
        window.location.href = `/profile/admin/${adminId}/school/manager/update`
    })

    document.addEventListener('DOMContentLoaded', () => {
        fetchData()
        fetchSchools()
    })
</script>
</html>

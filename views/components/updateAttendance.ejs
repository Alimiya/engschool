<!DOCTYPE html>
<html lang="kz">
<head>
    <meta charset="UTF-8">
    <title>Attendance</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body class="text-center">
<%- include('header') %>
<div class="container py-5">
    <div class="card mx-auto" style="max-width: 400px">
        <div class="card-header">
            <h3 class="text-center" data-i18n="update-attendance"></h3>
            <h4 class="text-center" id="date"></h4>
        </div>
        <div class="card-body">
            <form id="attendanceForm" method="post" class="text-center">
                <div class="mb-3" id="studentSelectWrapper">
                    <label for="studentSelect" class="form-label" data-i18n="select-students"></label>
                    <select class="form-select" id="studentSelect" name="studentIds[]" multiple required>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary w-100" id="submitButton" disabled data-i18n="update"></button>
            </form>
        </div>
    </div>
</div>
<div class="container">
    <div class="card mx-auto">
        <div class="card-header">
            <h3 data-i18n="attended-students"></h3>
        </div>
        <div class="card-body">
            <ul id="studentsList" class="list-group"></ul>
        </div>
    </div>
</div>
<script src="/i18n.js" type="module"></script>
<script>
    async function getStudents(classId) {
        try {
            const url = window.location.href
            const {classId} = extractIdsFromUrl(url)
            const response = await axios.get(`https://sch-eng.live/api/teacher/class/${classId}/students`)
            return response.data.students
        } catch (error) {
            console.error('Error fetching students:', error)
            return []
        }
    }

    async function getLesson() {
        try {
            const url = window.location.href
            const { classId, year, month, day } = extractIdsFromUrl(url)
            const response = await axios.get(`https://sch-eng.live/api/lesson/${classId}/${year}/${month}/${day}`)
            return response.data
        } catch (error) {
            console.error('Error fetching students:', error)
            return []
        }
    }

    function populateDropdown(selectElement, data, selectedValues) {
        selectElement.innerHTML = ''
        data.forEach(item => {
            const option = document.createElement('option')
            option.text = item.name
            option.value = item._id
            if (selectedValues.includes(item._id)) {
                option.selected = true
            }
            selectElement.appendChild(option)
        })
    }


    document.addEventListener("DOMContentLoaded", async function () {
        try {
            const attendanceForm = document.getElementById('attendanceForm')
            const studentSelect = document.getElementById('studentSelect')
            const submitButton = document.getElementById('submitButton')
            const studentSelectWrapper = document.getElementById('studentSelectWrapper')
            const date = document.getElementById('date')

            const url = window.location.href
            const { classId, year, month, day } = extractIdsFromUrl(url)
            date.innerText = `${year}/${month}/${day}`

            attendanceForm.action = `/api/lesson/update/${classId}/${year}/${month}/${day}`

            const students = await getStudents(classId)
            const lesson = await getLesson()

            const urlParams = new URLSearchParams(window.location.search)
            const selectedValues = urlParams.getAll('studentIds[]')

            populateDropdown(studentSelect, students, selectedValues)
            studentSelectWrapper.style.display = 'block'

            studentSelect.addEventListener('change', function () {
                submitButton.disabled = !studentSelect.value.length
            })

            const studentsList = document.getElementById('studentsList')
            studentsList.innerHTML = ''
            lesson.students.forEach(student => {
                const listItem = document.createElement('p')
                listItem.innerText = `${student.name}`
                listItem.classList.add('list-group-item-start')
                studentsList.appendChild(listItem)
            })

        } catch (err) {
            console.log(err)
        }
    })

    function extractIdsFromUrl(url) {
        const segments = url.split("/")
        const classId = segments[8]
        const year = segments[9]
        const month = segments[10]
        const day = segments[11]
        return { classId, year, month, day }
    }
</script>
</body>
</html>
